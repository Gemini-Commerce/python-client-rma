# coding: utf-8

"""
    RMA Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: info@gemini-commerce.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ListReturnsRequestFilter(BaseModel):
    """
    ListReturnsRequestFilter
    """ # noqa: E501
    search_terms: Optional[List[StrictStr]] = Field(default=None, alias="searchTerms")
    return_ids: Optional[List[StrictStr]] = Field(default=None, alias="returnIds")
    return_status: Optional[List[StrictStr]] = Field(default=None, alias="returnStatus")
    order_grns: Optional[List[StrictStr]] = Field(default=None, alias="orderGrns")
    order_numbers: Optional[List[StrictStr]] = Field(default=None, alias="orderNumbers")
    order_item_grns: Optional[List[StrictStr]] = Field(default=None, alias="orderItemGrns")
    order_item_skus: Optional[List[StrictStr]] = Field(default=None, alias="orderItemSkus")
    customer_grns: Optional[List[StrictStr]] = Field(default=None, alias="customerGrns")
    customer_emails: Optional[List[StrictStr]] = Field(default=None, alias="customerEmails")
    created_at_start: Optional[datetime] = Field(default=None, alias="createdAtStart")
    created_at_end: Optional[datetime] = Field(default=None, alias="createdAtEnd")
    __properties: ClassVar[List[str]] = ["searchTerms", "returnIds", "returnStatus", "orderGrns", "orderNumbers", "orderItemGrns", "orderItemSkus", "customerGrns", "customerEmails", "createdAtStart", "createdAtEnd"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ListReturnsRequestFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ListReturnsRequestFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "searchTerms": obj.get("searchTerms"),
            "returnIds": obj.get("returnIds"),
            "returnStatus": obj.get("returnStatus"),
            "orderGrns": obj.get("orderGrns"),
            "orderNumbers": obj.get("orderNumbers"),
            "orderItemGrns": obj.get("orderItemGrns"),
            "orderItemSkus": obj.get("orderItemSkus"),
            "customerGrns": obj.get("customerGrns"),
            "customerEmails": obj.get("customerEmails"),
            "createdAtStart": obj.get("createdAtStart"),
            "createdAtEnd": obj.get("createdAtEnd")
        })
        return _obj


