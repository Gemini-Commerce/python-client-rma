# coding: utf-8

"""
    RMA Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: info@gemini-commerce.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from rma.models.rma_return_response import RmaReturnResponse

class TestRmaReturnResponse(unittest.TestCase):
    """RmaReturnResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RmaReturnResponse:
        """Test RmaReturnResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RmaReturnResponse`
        """
        model = RmaReturnResponse()
        if include_optional:
            return RmaReturnResponse(
                id = '',
                grn = '',
                order_grn = '',
                status = '',
                products = [
                    rma.models.rma_return_product.rmaReturnProduct(
                        grn = '', 
                        reason = '', 
                        requested = rma.models.rma_return_product_property.rmaReturnProductProperty(
                            quantity = '', 
                            note = '', ), 
                        approved = rma.models.rma_return_product_property.rmaReturnProductProperty(
                            quantity = '', 
                            note = '', ), 
                        verified = , 
                        refunded = , )
                    ],
                preferred_refund_method = 'REFUND_METHOD_UNKNOWN',
                refund_shipping_cost = True,
                refund_payment_cost = True,
                customer_info = rma.models.rma_customer_info.rmaCustomerInfo(
                    firstname = '', 
                    lastname = '', 
                    email = '', 
                    phone = '', 
                    grn = '', ),
                return_address = rma.models.rma_postal_address.rmaPostalAddress(
                    revision = 56, 
                    region_code = '', 
                    language_code = '', 
                    postal_code = '', 
                    sorting_code = '', 
                    administrative_area = '', 
                    locality = '', 
                    sublocality = '', 
                    address_lines = [
                        ''
                        ], 
                    recipients = [
                        ''
                        ], 
                    organization = '', 
                    phone_number = '', 
                    additional_info = rma.models.additional_info.additionalInfo(), ),
                note = '',
                history = [
                    rma.models.rma_return_history.rmaReturnHistory(
                        date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        status = '', 
                        note = '', )
                    ],
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                order_data = rma.models.rma_order_data.rmaOrderData(
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    grn = '', 
                    number = '', 
                    status = '', 
                    channel = '', 
                    market = '', 
                    items = [
                        rma.models.rma_order_data_item.rmaOrderDataItem(
                            id = '', 
                            product_grn = '', 
                            qty_ordered = 56, 
                            qty_committed = 56, 
                            qty_shipped = 56, 
                            unit_sale_price = rma.models.rma_money.rmaMoney(
                                units = '', 
                                micros = 56, ), 
                            unit_list_price = rma.models.rma_money.rmaMoney(
                                units = '', 
                                micros = 56, ), 
                            unit_vat_amount = , 
                            row_sale_price = , 
                            row_list_price = , 
                            row_vat_amount = , 
                            vat_percentage = 1.337, 
                            vat_inaccurate = True, 
                            vat_calculated = True, 
                            product_name = '', 
                            product_code = '', 
                            product_sku = '', 
                            product_options = '', 
                            product_img = '', 
                            product_data = '', 
                            shipment_info_reference = '', 
                            promotion_grn = [
                                ''
                                ], 
                            product_is_virtual = True, )
                        ], 
                    currency = 'XXX', 
                    subtotals = {
                        'key' : rma.models.order_data_subtotal.OrderDataSubtotal(
                            code = 'UNKNOWN', 
                            value = , )
                        }, 
                    totals = {
                        'key' : rma.models.order_data_total.OrderDataTotal()
                        }, )
            )
        else:
            return RmaReturnResponse(
        )
        """

    def testRmaReturnResponse(self):
        """Test RmaReturnResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
